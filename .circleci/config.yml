# CircleCI configuration file
setup_testing_bed: &setup_testing_bed
  run:
    name: Setup for Testing
    command: |
          # Installing Chrome browser and Chrome driver
          pwd
          ls
          
          sudo apt-get update || true
          sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install ./google-chrome-stable_current_amd64.deb
          google-chrome --version
          version=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE")
          sudo wget https://chromedriver.storage.googleapis.com/${version}/chromedriver_linux64.zip
          sudo unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/bin/chromedriver
          sudo chown root:root /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          
          # Installing python dependencies and Setting up AWS CLI
          
          sudo apt install python3-pip -y
          sudo pip3 install -U setuptools wheel
          #pip3 install robotframework robotframework-seleniumlibrary robotframework-mqttlibrary robotframework-requests pyyaml pytz
          sudo pip3 install -r ~/project/requirements.txt
          sudo apt install python3-bs4 -y
          sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo unzip awscliv2.zip
          sudo ./aws/install
    background: true


# Install NPM and Appium
setup_appium: &setup_appium
  run:
    name: Setup for Installing and Starting Appium
    command: |
      sudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
      echo "Successfully Installed NVM-Node Version Manager"
      nvm install node
      npm install -g appium
      node --version
      npm --version
      appium --version
      which appium
      appium
      echo Started Appium in the Background
    background: true


# Install Git
git_setup: &setup_git
  run:
    name: For Git
    command: |
          sudo apt-get update
          sudo apt-get install -y openssh-client git
          git --version
          ssh -V

# .circleci/config.yml
version: 2.1
jobs:
  build:
    machine:
      image: android:202102-01
    # To optimize build times, we recommend "large" and above for Android-related jobs
    resource_class: 2xlarge
    working_directory: ~/project
    steps:
      - checkout
      - <<: *setup_appium
      - <<: *setup_testing_bed
      - run:
          name: Create avd
          command: |
            SYSTEM_IMAGES="system-images;android-33;google_apis;x86_64"
            sdkmanager "$SYSTEM_IMAGES"
            which avdmanager
            # echo "no" | sudo /opt/android/sdk/cmdline-tools/latest/bin/avdmanager --verbose create avd -n test -k "$SYSTEM_IMAGES"
            echo "no" | avdmanager --verbose create avd -n test -k "$SYSTEM_IMAGES"
            avdmanager list avd
            which emulator
            export PATH="/opt/android/sdk/emulator/emulator:$PATH"
            source ~/.bashrc
            emulator -version
            # sudo chown -R root:root /home/circleci/.android/avd
            # sudo chmod -R 755 /home/circleci/.android/avd
            ls -al /home/circleci/.android/avd/

      - run:
          name: Launch emulator
          command: |
            cd /home/circleci/.android/avd
            echo AVDS using sudo command
            sudo /opt/android/sdk/emulator/emulator -list-avds || true
            emulator -list-avds || true
            echo AVDS using emulator command
            emulator -avd test -delay-adb -no-window -no-snapshot -noaudio -no-boot-anim -show-kernel -verbose -selinux permissive -qemu -m 20480
            # emulator -avd test -no-window -no-audio -skip-adb-auth -no-boot-anim -qemu -m 20480
            # sudo /opt/android/sdk/emulator/emulator -avd test
          background: true

      - run:
          name: Wait for emulator to start
          command: |
            circle-android wait-for-boot
            echo After Wait time

      - run:
          name: Disable emulator animations
          command: |
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0

      - run:
          name: Is Emulator Running
          command: |
            ps aux
            free -h
            for i in $(seq 1 10)
            do
              echo "Iteration: $i"
              sleep 10
              adb -s emulator-5554 shell cat /proc/meminfo
              adb devices
            done
          background: true

      - run:
          name: Run UI tests (with retry)
          command: |
            sleep 60
            echo Hi
            sudo mkdir -p ~/.circleci
            echo Hi1
            echo "export TEAM_NAME=SPC" | sudo tee -a ~/.circleci/bash_env            
            echo Hi2
            echo "export TEAM_MAIL_LIST=boobalakumaran.s@rently.com" | sudo tee -a ~/.circleci/bash_env
            pwd
            ls
            cd ~/project/Test_Suite
            DIR=${CIRCLE_BRANCH}_SPC_`date +%Y_%m_%d_%H%M`
            echo Hi3
            sudo mkdir /home/circleci/${DIR}
            echo Hi4
            echo "export DIR=$DIR" | sudo tee -a ~/.circleci/bash_env
            
            pip list
        
            which robot
            
            echo Hi5
            . ~/.circleci/bash_env
        
            
            echo Hi7
            robot --name "Integrated automation nightly execution report" -d "/home/circleci/project/Results/${DIR}" Test_Cases.robot || true
            
            # Making a copy of the Execution reports of this Run
            sudo cp -i /home/circleci/project/Results/${DIR}/report.html /home/circleci/project/Results/${DIR}/main_run_report.html
            sudo cp -i /home/circleci/project/Results/${DIR}/log.html /home/circleci/project/Results/${DIR}/main_run_log.html

            ls -l /home/circleci/project/Results/${DIR}
          no_output_timeout: 30m

      #Upload to artifacts
      - run:
          name: Move result to Artifacts
          command: |
            mkdir /tmp/artifacts
            sudo cp -r /home/circleci/project/Results/${DIR}/* /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/